# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'hello.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog, QApplication, QLabel, QSpacerItem, QSizePolicy
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtCore import QTimer, QTime, Qt
from PyQt5.QtMultimedia import QSound


class Eyem_test_Window(QDialog):
    def __init__(self):
        super(Eyem_test_Window, self).__init__()
        self.setWindowTitle("眼动伪迹采集")
        self.resize(2600,1600)

        # 创建显示倒计时的 QLabel
        layout = QtWidgets.QVBoxLayout(self)  # 创建一个 QVBoxLayout 布局管理器
        self.timer_label = QLabel(self)
        self.timer_label.setAlignment(Qt.AlignCenter)
        font = QtGui.QFont()
        font.setPointSize(35)  # 设置字体大小
        self.timer_label.setFont(font)
        layout.addWidget(self.timer_label, alignment=Qt.AlignCenter)

        # 创建定时器
        self.dot_timer = QTimer(self)
        self.rest_timer = QTimer(self)
        self.dot_timer.timeout.connect(self.show_dot)
        self.rest_timer.timeout.connect(self.rest_update)
        self.dot_visible = True  # 红点是否可见
        self.dot_position = 0  # 控制红点的位置（0 为顶部/左部，1 为底部/右部）
        self.is_dot_centered = False  # 标志位，是否已经将红点放置到窗口中心

    def rest(self):
        self.is_dot_centered = False
        self.update()
        self.remaintime = 5
        self.rest_timer.start(1000)

    def eyeblink(self):
        self.round = 2
        self.is_dot_centered = False
        self.update()
        self.remaintime = 5
        self.rest_timer.start(1000)

    def rest_update(self):
        # 更新显示的时间

        minutes = self.remaintime // 60
        seconds = self.remaintime % 60
        label_text = "休息时间"
        if self.round == 2 :
            label_text = "正常眨眼"
        self.timer_label.setText(f"{label_text}:{minutes:02d}:{seconds:02d}")

        # 如果时间到了，停止计时器
        if self.remaintime <= 0:
            self.rest_timer.stop()
            if self.round == 0:
                self.timer_label.hide()
                self.next_round()
            elif self.round == 1:
                self.play_alarm()
                self.eyeblink()
            elif self.round == 2:
                self.play_alarm()
                QSound.play("结束.wav")
                self.timer_label.setText("眼动测试结束!")
        else:
            self.remaintime -= 1  # 每次减少 1 秒

    def start_dot_animation(self):
        self.verorhor = 0
        self.eyem_times = 10
        self.round = 0
        self.dot_timer.start(1000)  # 每 1 秒更新一次

    def next_round(self):
        self.verorhor = 1
        self.eyem_times = 10
        self.round = 1
        self.dot_timer.start(1000)  # 每 1 秒更新一次

    def show_dot(self):
        if self.eyem_times != 0:
            self.dot_position = 1 - self.dot_position  # 切换位置
            # 触发提示音
            self.play_alarm()
            # 更新窗口以绘制红点
            self.update()
            # 次数减一
            self.eyem_times -= 1
        else:
            self.dot_timer.stop()
            self.timer_label.show()
            if self.round == 0 or 1:
                self.rest()

    def play_alarm(self):
        # 播放声音，确保你有这个文件
        QSound.play("alert.wav")  # 音频文件路径


    def paintEvent(self, event):
        painter = QtGui.QPainter(self)
        painter.setRenderHint(QtGui.QPainter.Antialiasing)

        # 绘制红点
        if self.dot_visible:
            dot_radius = 50
            dot_color = QtGui.QColor(255, 0, 0)  # 红色
            painter.setBrush(dot_color)

            # 确定红点的位置
            if not self.is_dot_centered:
                # 将红点绘制到窗口的中心
                painter.drawEllipse(self.rect().center().x() - dot_radius / 2,
                                    self.rect().center().y() - dot_radius / 2,
                                    dot_radius, dot_radius)
                # 设置标志位为 True，表示已经放置
                self.is_dot_centered = True
            else:
                if self.verorhor == 0:
                    if self.dot_position == 0:  # 顶部
                        painter.drawEllipse(self.rect().center().x() - dot_radius / 2, 0, dot_radius, dot_radius)
                    else:  # 底部
                        painter.drawEllipse(self.rect().center().x() - dot_radius / 2, self.height() - dot_radius,
                                            dot_radius, dot_radius)
                elif self.verorhor == 1:
                    if self.dot_position == 0:  # 左侧
                        painter.drawEllipse(0, self.rect().center().y() - dot_radius / 2, dot_radius, dot_radius)
                    else:  # 右侧
                        painter.drawEllipse(self.width() - dot_radius, self.rect().center().y() - dot_radius / 2,
                                            dot_radius, dot_radius)



