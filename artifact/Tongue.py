# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'hello.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog, QApplication, QLabel, QSpacerItem, QSizePolicy
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtCore import QTimer, QTime, Qt
from PyQt5.QtMultimedia import QSound
import api

'''
舌动测试类，弹出舌动测试窗口，舌动测试提示受试者跟读7个L音节打头的成语，促使舌头卷动，共3轮跟读
'''

class Tongue_test_Window(QDialog):
    def __init__(self):
        super(Tongue_test_Window, self).__init__()
        self.setWindowTitle("舌动伪迹采集")
        self.resize(580,580)

        # 创建显示倒计时的 QLabel
        layout = QtWidgets.QVBoxLayout(self)  # 创建一个 QVBoxLayout 布局管理器
        self.timer_label = QLabel(self)
        self.timer_label.setAlignment(Qt.AlignCenter)
        font = QtGui.QFont()
        font.setPointSize(35)  # 设置字体大小
        self.timer_label.setFont(font)
        layout.addWidget(self.timer_label, alignment=Qt.AlignCenter)

        # 创建定时器
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.read)
        #创建提示定时器
        self.reminder_timer = QTimer(self)
        self.reminder_timer.timeout.connect(self.start_alarm)
        #创建休息定时器
        self.rest_timer = QTimer(self)
        self.rest_timer.timeout.connect(self.rest_repeat)

        self.remind_count = 2  # 设置跟读轮数，实际为2+1轮，因为初始调用了一轮

    def rest(self):#此函数为开启舌动测试的初始函数
        self.remaintime = 10  # 每次休息10s
        QSound.play("休息.wav")
        self.rest_timer.start(1000)


    def reminder(self): #调用此函数开始舌动测试
        self.timer_label.setText("每次提示音发出lalala三声")
        QSound.play("lalala.wav")
        self.num_text = 10  # lalala10次
        self.list_count = 0 #记录已经提示的个数
        self.reminder_timer.start(3000)

    def start_alarm(self):
        self.reminder_timer.stop()
        self.timer.start(2000)

    def read(self):
        if self.num_text != 0:
            self.play_alarm()
            self.list_count += 1
            if self.list_count > 1:
                api.mark(0)
            if self.list_count != 0:
                api.mark(9)
            self.num_text -= 1
        else:
            self.timer.stop()
            api.mark(0)
            if self.remind_count != 0:
                self.rest()
                self.remind_count -= 1
            else:
                QSound.play("结束.wav")
                self.timer_label.setText("舌动测试结束！")

    def rest_repeat(self):
        minutes = self.remaintime // 60
        seconds = self.remaintime % 60
        label_text = "休息时间"
        self.timer_label.setText(f"{label_text}:{minutes:02d}:{seconds:02d}")

        if self.remaintime != 0:
            self.remaintime -= 1
        else:
            self.rest_timer.stop()#根据休息记录，决定接下来执行什么测试
            self.reminder()


    def play_alarm(self):
        # 播放声音，确保你有这个文件
        QSound.play("alert.wav")  # 音频文件路径


